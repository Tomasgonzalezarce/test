{"cells":[{"cell_type":"markdown","source":["# Métricas de Error en Sistemas de Recomendación con Filtro Colaborativo\n","\n","En los sistemas de recomendación, es importante tener una forma de medir qué tan buenas son nuestras predicciones. Para esto, utilizamos métricas de error. Aquí están algunas de las más comunes:\n","\n","## Error Cuadrático Medio (RMSE)\n","\n","El Error Cuadrático Medio (RMSE, por sus siglas en inglés) es una de las métricas de error más comúnmente utilizadas en los sistemas de recomendación. Se calcula tomando la raíz cuadrada de la media de los errores al cuadrado. En otras palabras, para cada predicción que hacemos, calculamos la diferencia entre la predicción y el valor real, elevamos al cuadrado esa diferencia, y luego tomamos la media de todas esas diferencias al cuadrado. Finalmente, tomamos la raíz cuadrada de esa media. La fórmula es la siguiente:\n","\n","$$RMSE = \\sqrt{\\frac{1}{N}\\sum_{i=1}^{N}(y_i - \\hat{y}_i)^2}$$\n","\n","Donde:\n","- $y_i$ es el valor real\n","- $\\hat{y}_i$ es el valor predicho\n","- $N$ es el número total de predicciones\n","\n","## Error Absoluto Medio (MAE)\n","\n","El Error Absoluto Medio (MAE, por sus siglas en inglés) es otra métrica de error comúnmente utilizada. Se calcula tomando la media de los errores absolutos. En otras palabras, para cada predicción que hacemos, calculamos la diferencia entre la predicción y el valor real, tomamos el valor absoluto de esa diferencia, y luego tomamos la media de todas esas diferencias absolutas. La fórmula es la siguiente:\n","\n","$$MAE = \\frac{1}{N}\\sum_{i=1}^{N}|y_i - \\hat{y}_i|$$\n","\n","Donde:\n","- $y_i$ es el valor real\n","- $\\hat{y}_i$ es el valor predicho\n","- $N$ es el número total de predicciones\n","\n","Estas métricas nos dan una idea de cuánto se desvían nuestras predicciones de los valores reales. En general, cuanto menor sea el valor de estas métricas, mejor será nuestro sistema de recomendación."],"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"markdown"},"id":"e4938a46-7587-4061-91e6-21f1e6d549c6"},"id":"e4938a46-7587-4061-91e6-21f1e6d549c6"},{"cell_type":"code","source":["import numpy as np\n"],"outputs":[],"execution_count":2,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"code"},"id":"c190b83e-25c1-4c31-a8dd-ddfab89320fe","executionInfo":{"status":"ok","timestamp":1686952687150,"user_tz":240,"elapsed":275,"user":{"displayName":"Tomas Gonzalez Arce","userId":"12884299571658916274"}}},"id":"c190b83e-25c1-4c31-a8dd-ddfab89320fe"},{"cell_type":"markdown","source":["## Matriz de Calificaciones\n","\n","Una matriz de calificaciones es una estructura de datos que se utiliza en los sistemas de recomendación para almacenar las calificaciones que los usuarios han dado a los elementos. En esta matriz, las filas representan a los usuarios y las columnas representan a los elementos. El valor en la celda en la i-ésima fila y la j-ésima columna representa la calificación que el i-ésimo usuario ha dado al j-ésimo elemento.\n","\n","Por ejemplo, si tenemos 5 usuarios y 4 elementos, la matriz de calificaciones podría ser algo como esto:\n","\n","|   | Elemento 1 | Elemento 2 | Elemento 3 | Elemento 4 |\n","|---|------------|------------|------------|------------|\n","| Usuario 1 |     5      |     3      |     0      |     1      |\n","| Usuario 2 |     4      |     0      |     0      |     1      |\n","| Usuario 3 |     1      |     1      |     0      |     5      |\n","| Usuario 4 |     1      |     0      |     0      |     4      |\n","| Usuario 5 |     0      |     1      |     5      |     4      |\n","\n","En este caso, el Usuario 1 ha dado una calificación de 5 al Elemento 1, una calificación de 3 al Elemento 2, y así sucesivamente. Los ceros representan las calificaciones que aún no se han dado.\n","\n","A continuación, vamos a implementar un ejemplo de una matriz de calificaciones en Python."],"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"markdown"},"id":"8c307ff9-8f1f-4eda-840b-171263d5ec84"},"id":"8c307ff9-8f1f-4eda-840b-171263d5ec84"},{"cell_type":"code","source":["# Crear una matriz de calificaciones de ejemplo\n","ratings = np.array([\n","    [5, 3, 0, 1],\n","    [4, 0, 0, 1],\n","    [1, 1, 0, 5],\n","    [1, 0, 0, 4],\n","    [0, 1, 5, 4],\n","])\n","\n","print('Matriz de calificaciones:')\n","print(ratings)"],"outputs":[{"output_type":"stream","name":"stdout","text":["Matriz de calificaciones:\n","[[5 3 0 1]\n"," [4 0 0 1]\n"," [1 1 0 5]\n"," [1 0 0 4]\n"," [0 1 5 4]]\n"]}],"execution_count":3,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"code"},"ExecuteTime":{"start_time":"2023-06-06T03:17:36.796262+00:00","end_time":"2023-06-06T03:17:36.953625+00:00"},"colab":{"base_uri":"https://localhost:8080/"},"id":"b903052a-e28d-4bd4-b4a4-cea050b18083","executionInfo":{"status":"ok","timestamp":1686952690465,"user_tz":240,"elapsed":271,"user":{"displayName":"Tomas Gonzalez Arce","userId":"12884299571658916274"}},"outputId":"5e7914c6-71e5-4b89-fad2-1a5488b030d1"},"id":"b903052a-e28d-4bd4-b4a4-cea050b18083"},{"cell_type":"markdown","source":["# Sistema de Recomendación con Filtro Colaborativo\n","\n","Un sistema de recomendación con filtro colaborativo es un tipo de sistema de recomendación que predice el interés de un usuario en un producto o servicio basándose en las preferencias de otros usuarios con gustos similares. Este enfoque se basa en la idea de que si dos usuarios están de acuerdo en un tema, es probable que estén de acuerdo en otros temas.\n","\n","El filtro colaborativo se puede dividir en dos subtipos: basado en memoria y basado en modelo.\n","\n","1. **Filtro colaborativo basado en memoria:** Este enfoque utiliza las calificaciones de los usuarios para calcular la similitud entre los usuarios o los elementos. Las técnicas comunes de este enfoque incluyen el filtrado colaborativo basado en el usuario (donde se recomiendan elementos que usuarios similares han gustado en el pasado) y el filtrado colaborativo basado en el elemento (donde se recomiendan elementos similares a los que el usuario ha gustado en el pasado).\n","\n","2. **Filtro colaborativo basado en modelo:** Este enfoque utiliza técnicas de aprendizaje automático para predecir las calificaciones de los usuarios. Los modelos comunes incluyen el modelo de factorización matricial (donde se descompone la matriz de calificaciones de los usuarios en el producto de dos matrices de menor rango) y el modelo de factorización de máquinas de vectores de soporte (donde se utiliza una máquina de vectores de soporte para predecir las calificaciones de los usuarios).\n","\n","A continuación, vamos a implementar un ejemplo de un sistema de recomendación con filtro colaborativo basado en memoria utilizando Python."],"metadata":{"jupyter":{"outputs_hidden":false,"source_hidden":false},"noteable":{"cell_type":"markdown"},"id":"92a535e6-9585-4b1c-97a3-04eb5edee912"},"id":"92a535e6-9585-4b1c-97a3-04eb5edee912"},{"cell_type":"code","source":["# Importamos las librerías necesarias\n","import numpy as np\n","from sklearn.metrics.pairwise import cosine_similarity\n","\n","# Creamos una matriz de calificaciones de ejemplo\n","ratings = np.array([\n","    [5, 3, 0, 1],\n","    [4, 0, 0, 1],\n","    [1, 1, 0, 5],\n","    [1, 0, 0, 4],\n","    [0, 1, 5, 4],\n","])\n","\n","# Calculamos la similitud del coseno entre los elementos\n","item_similarity = cosine_similarity(ratings.T)\n","print('Matriz de similitud de elementos:')\n","print(item_similarity)\n","\n","# Predecimos las calificaciones\n","def predict(ratings, similarity):\n","    return ratings.dot(similarity) / np.array([np.abs(similarity).sum(axis=1)])\n","\n","item_prediction = predict(ratings, item_similarity)\n","print('\\nPredicciones de calificaciones:')\n","print(item_prediction)"],"outputs":[{"output_type":"stream","name":"stdout","text":["Matriz de similitud de elementos:\n","[[1.         0.73568078 0.         0.35736521]\n"," [0.73568078 1.         0.30151134 0.4710412 ]\n"," [0.         0.30151134 1.         0.52075564]\n"," [0.35736521 0.4710412  0.52075564 1.        ]]\n","\n","Predicciones de calificaciones:\n","[[3.61406657 2.85039076 0.78215195 1.78785012]\n"," [2.08182965 1.36102343 0.28577352 1.03418188]\n"," [1.6829572  1.63098335 1.59432706 2.48105762]\n"," [1.16072979 1.04449836 1.14309406 1.85485935]\n"," [1.03444532 1.75092224 4.05238857 3.01163532]]\n"]}],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"code"},"ExecuteTime":{"start_time":"2023-06-06T03:14:28.553442+00:00","end_time":"2023-06-06T03:14:29.139215+00:00"},"id":"420da443-7d80-449a-aeb0-adc614e93d06","outputId":"3a2c955d-592f-4711-ec7e-3ea50d030ec2"},"id":"420da443-7d80-449a-aeb0-adc614e93d06"},{"cell_type":"markdown","source":["## Algoritmo de Recomendación Basado en los N-Primeros\n","\n","El algoritmo de recomendación basado en los N-Primeros es un enfoque simple pero efectivo para los sistemas de recomendación. La idea básica es recomendar los N elementos más populares o más calificados a los usuarios. Este enfoque es especialmente útil cuando no tenemos información previa sobre las preferencias de los usuarios, lo que se conoce como el problema del inicio en frío.\n","\n","El algoritmo de los N-Primeros es fácil de implementar y computacionalmente eficiente, pero tiene algunas limitaciones. En particular, este enfoque no personaliza las recomendaciones para cada usuario y puede conducir a una falta de diversidad en las recomendaciones.\n","\n","A continuación, vamos a implementar un ejemplo de un algoritmo de recomendación basado en los N-Primeros en Python. Para este ejemplo, vamos a asumir que tenemos una matriz de calificaciones de los usuarios a los elementos, y vamos a recomendar los N elementos con las calificaciones más altas."],"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"markdown"},"id":"e93d2550-a16f-496a-bb4a-e7bbc31d1f64"},"id":"e93d2550-a16f-496a-bb4a-e7bbc31d1f64"},{"cell_type":"code","source":["# Función para recomendar los N elementos con las calificaciones más altas\n","def recommend_top_n(ratings, n):\n","    # Calcular la calificación media de cada elemento\n","    item_means = ratings.mean(axis=0)\n","\n","    # Obtener los índices de los N elementos con las calificaciones más altas\n","    top_n_items = np.argsort(item_means)[-n:]\n","\n","    return top_n_items\n","\n","# Recomendar los 2 elementos con las calificaciones más altas\n","top_2_items = recommend_top_n(ratings, 2)\n","print('Los 2 elementos con las calificaciones más altas son:', top_2_items)"],"outputs":[{"output_type":"stream","name":"stdout","text":["Los 2 elementos con las calificaciones más altas son: [0 3]\n"]}],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"code"},"ExecuteTime":{"start_time":"2023-06-06T03:20:08.650251+00:00","end_time":"2023-06-06T03:20:08.808105+00:00"},"id":"1dfead65-af34-4788-9bcd-04008216a483","outputId":"49fd5554-85a3-4c9c-ffe4-df3c039149c0"},"id":"1dfead65-af34-4788-9bcd-04008216a483"},{"cell_type":"markdown","source":["## Algoritmo de Recomendación Slope One\n","\n","Slope One es un algoritmo de recomendación basado en la idea de hacer predicciones simples y eficientes. La idea básica del algoritmo Slope One es calcular la diferencia promedio en las calificaciones entre un par de elementos y luego usar estas diferencias para predecir las calificaciones de los elementos no calificados.\n","\n","El algoritmo Slope One tiene varias ventajas. En primer lugar, es simple y fácil de entender. En segundo lugar, es eficiente en términos de tiempo y espacio. En tercer lugar, puede manejar nuevas calificaciones, usuarios y elementos de manera incremental sin necesidad de recomputar todas las diferencias.\n","\n","A continuación, vamos a implementar un ejemplo de un algoritmo de recomendación Slope One en Python. Para este ejemplo, vamos a asumir que tenemos una matriz de calificaciones de los usuarios a los elementos, y vamos a usar el algoritmo Slope One para predecir las calificaciones de los elementos no calificados."],"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"markdown"},"id":"c9e9cfbb-2c3c-4bd5-b360-655dc59c265d"},"id":"c9e9cfbb-2c3c-4bd5-b360-655dc59c265d"},{"cell_type":"code","source":["# Importar la biblioteca de recomendación de Surprise\n","from surprise import Dataset, Reader, SlopeOne, accuracy\n","from surprise.model_selection import train_test_split\n","\n","# Crear un conjunto de datos de ejemplo\n","ratings_dict = {\n","    'item': [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],\n","    'user': ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B'],\n","    'rating': [1, 2, 2, 4, 2.5, 4, 4.5, 5, 3, 2]\n","}\n","\n","# Definir un lector para el rango de calificaciones\n","reader = Reader(rating_scale=(1, 5))\n","\n","# Crear el conjunto de datos de las calificaciones\n","data = Dataset.load_from_df(pd.DataFrame(ratings_dict), reader)\n","\n","# Dividir el conjunto de datos en entrenamiento y prueba\n","trainset, testset = train_test_split(data, test_size=.25)\n","\n","# Entrenar el algoritmo Slope One\n","algo = SlopeOne()\n","algo.fit(trainset)\n","\n","# Predecir las calificaciones para el conjunto de prueba\n","predictions = algo.test(testset)\n","\n","# Calcular RMSE\n","print('RMSE of Slope One: ', accuracy.rmse(predictions))"],"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE: 1.7325\n","RMSE of Slope One:  1.7325416821167994\n"]}],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"code"},"ExecuteTime":{"start_time":"2023-06-06T03:24:21.966732+00:00","end_time":"2023-06-06T03:24:22.220110+00:00"},"id":"cd189c63-2e8b-4c5a-a05d-440c13f804fc","outputId":"82a8dd16-a327-4fe1-f36e-a57052a8613f"},"id":"cd189c63-2e8b-4c5a-a05d-440c13f804fc"},{"cell_type":"markdown","source":["## Algoritmo de Recomendación SVD\n","\n","SVD, o Descomposición en Valores Singulares, es un algoritmo popular para sistemas de recomendación. Es especialmente útil en el caso de los sistemas de recomendación basados en filtrado colaborativo, donde se busca predecir la calificación que un usuario daría a un elemento basándose en las calificaciones dadas por otros usuarios.\n","\n","La idea básica detrás de SVD es que podemos descomponer una matriz en tres matrices separadas:\n","\n","$$M = U \\Sigma V^T$$\n","\n","Donde:\n","- $M$ es la matriz original (en el caso de los sistemas de recomendación, esta sería la matriz de calificaciones de los usuarios a los elementos).\n","- $U$ es una matriz que representa la relación entre los usuarios y los conceptos latentes.\n","- $\\Sigma$ es una matriz diagonal que contiene los valores singulares (que representan la fuerza de cada concepto latente).\n","- $V^T$ es una matriz que representa la relación entre los elementos y los conceptos latentes.\n","\n","Una vez que tenemos estas tres matrices, podemos usarlas para predecir las calificaciones de los elementos no calificados. Para hacer esto, simplemente multiplicamos las tres matrices juntas para obtener una matriz de calificaciones predichas.\n","\n","A continuación, vamos a implementar un ejemplo de un algoritmo de recomendación SVD en Python. Para este ejemplo, vamos a asumir que tenemos una matriz de calificaciones de los usuarios a los elementos, y vamos a usar el algoritmo SVD para predecir las calificaciones de los elementos no calificados."],"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"markdown"},"id":"c3059a65-a8d2-44e5-8c50-d659aa0c34af"},"id":"c3059a65-a8d2-44e5-8c50-d659aa0c34af"},{"cell_type":"code","source":["# Importar la biblioteca de recomendación de Surprise\n","from surprise import Dataset, Reader, SVD, accuracy\n","from surprise.model_selection import train_test_split\n","\n","# Crear un conjunto de datos de ejemplo\n","ratings_dict = {\n","    'item': [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],\n","    'user': ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B'],\n","    'rating': [1, 2, 2, 4, 2.5, 4, 4.5, 5, 3, 2]\n","}\n","\n","# Definir un lector para el rango de calificaciones\n","reader = Reader(rating_scale=(1, 5))\n","\n","# Crear el conjunto de datos de las calificaciones\n","data = Dataset.load_from_df(pd.DataFrame(ratings_dict), reader)\n","\n","# Dividir el conjunto de datos en entrenamiento y prueba\n","trainset, testset = train_test_split(data, test_size=.25)\n","\n","# Entrenar el algoritmo SVD\n","algo = SVD()\n","algo.fit(trainset)\n","\n","# Predecir las calificaciones para el conjunto de prueba\n","predictions = algo.test(testset)\n","\n","# Calcular RMSE\n","print('RMSE of SVD: ', accuracy.rmse(predictions))"],"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE: 1.5196\n","RMSE of SVD:  1.5195667804512996\n"]}],"execution_count":null,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"code"},"ExecuteTime":{"start_time":"2023-06-06T03:27:00.548835+00:00","end_time":"2023-06-06T03:27:00.710708+00:00"},"id":"4bca3748-77cb-43d5-a994-69d9f5e3f605","outputId":"b41f873c-fea1-48d3-856a-796bc3b2ae93"},"id":"4bca3748-77cb-43d5-a994-69d9f5e3f605"},{"cell_type":"markdown","source":["# Ejercicios\n","\n","Ahora que hemos revisado los conceptos básicos de los sistemas de recomendación con filtro colaborativo, es hora de poner en práctica lo que hemos aprendido. Aquí hay algunos ejercicios para que los desarrolles:\n","\n","## Ejercicio 1: Matriz de Calificaciones\n","\n","Crea una matriz de calificaciones de 5x5 con datos generados aleatoriamente. Luego, utiliza la función `mean()` para calcular la calificación media de cada usuario.\n","\n","## Ejercicio 2: Algoritmo de los N-primeros\n","\n","Implementa el algoritmo de los N-primeros. Dada una matriz de calificaciones y un número N, tu función debe devolver los N primeros elementos recomendados para cada usuario.\n","\n","## Ejercicio 3: Algoritmo SVD\n","\n","Utiliza la descomposición en valores singulares (SVD) para hacer recomendaciones basadas en la matriz de calificaciones que creaste en el Ejercicio 1. Compara los resultados con los obtenidos en el Ejercicio 2."],"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"noteable":{"cell_type":"markdown"},"id":"c44b2127-cf3b-4093-a64d-132e458eb9a1"},"id":"c44b2127-cf3b-4093-a64d-132e458eb9a1"},{"cell_type":"markdown","source":["SOLUCIÓN EJERCICIO 1"],"metadata":{"id":"UR-NIwDXOIVq"},"id":"UR-NIwDXOIVq"},{"cell_type":"code","source":["import numpy as np  #importamos las librerias necesarias\n","\n","matriz = np.random.rand(5, 5)  #generamos la matriz 5x5 con datos aleatorios\n","\n","print(matriz)  #mostramos la matriz\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DM2lQlNyOHdh","executionInfo":{"status":"ok","timestamp":1686952857968,"user_tz":240,"elapsed":231,"user":{"displayName":"Tomas Gonzalez Arce","userId":"12884299571658916274"}},"outputId":"67f24d74-b8f1-4e56-e02b-8f5453f07855"},"id":"DM2lQlNyOHdh","execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.96356532 0.64668765 0.49723723 0.81417546 0.72280766]\n"," [0.16968981 0.09426519 0.1624864  0.55425819 0.37053863]\n"," [0.73845789 0.35351301 0.90408141 0.124975   0.87436272]\n"," [0.07138485 0.72590531 0.38264225 0.23021053 0.73311286]\n"," [0.52138788 0.03182921 0.1401635  0.74671936 0.53768547]]\n"]}]},{"cell_type":"code","source":["media_usuarios = np.mean(matriz, axis=1)\n","\n","print(\"Media de los usuarios:\", media_usuarios)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xuipBlE5OurL","executionInfo":{"status":"ok","timestamp":1686952940418,"user_tz":240,"elapsed":269,"user":{"displayName":"Tomas Gonzalez Arce","userId":"12884299571658916274"}},"outputId":"66a36779-2d73-4040-8338-30c83b9b6445"},"id":"xuipBlE5OurL","execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Media de los usuarios: [0.72889467 0.27024764 0.59907801 0.42865116 0.39555708]\n"]}]},{"cell_type":"markdown","source":["SOLUCION EJERCICIO 2"],"metadata":{"id":"QRwK8Ax9PC_S"},"id":"QRwK8Ax9PC_S"},{"cell_type":"code","source":["def recommend_top_n(matriz, n):\n","\n","    # Obtener los índices de los N elementos con las calificaciones más altas\n","    top_n_items = np.argsort(media_usuarios)[-n:]\n","\n","    return top_n_items\n","\n","\n","\n","top_5_items = recommend_top_n(matriz, 5)\n","print('Los 5 elementos con las calificaciones más altas son:', top_5_items)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3ApHJtQyPFOm","executionInfo":{"status":"ok","timestamp":1686954228914,"user_tz":240,"elapsed":260,"user":{"displayName":"Tomas Gonzalez Arce","userId":"12884299571658916274"}},"outputId":"61a5ae29-fcc9-4ae8-d45c-81dcf3b7005a"},"id":"3ApHJtQyPFOm","execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Los 5 elementos con las calificaciones más altas son: [1 4 3 2 0]\n"]}]},{"cell_type":"markdown","source":["SOLUCION EJERCICIO 3"],"metadata":{"id":"ePwXxhZxPpl6"},"id":"ePwXxhZxPpl6"},{"cell_type":"code","source":["pip install surprise"],"metadata":{"id":"SOkTCimEPrMW"},"id":"SOkTCimEPrMW","execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip install pandas"],"metadata":{"id":"1bcobJjfQD9L"},"id":"1bcobJjfQD9L","execution_count":null,"outputs":[]},{"cell_type":"code","source":["from surprise.model_selection import train_test_split"],"metadata":{"id":"k5VJXs8fQkel","executionInfo":{"status":"ok","timestamp":1686953416309,"user_tz":240,"elapsed":239,"user":{"displayName":"Tomas Gonzalez Arce","userId":"12884299571658916274"}}},"id":"k5VJXs8fQkel","execution_count":11,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import surprise\n","from surprise import Dataset, Reader, SVD, accuracy\n","from scipy.linalg import svd\n","\n","def svd_recommendations(matriz, N):\n","    # Realizar la descomposición en valores singulares (SVD)\n","    U, sigma, Vt = svd(matriz)\n","\n","    # Reconstruir la matriz de calificaciones utilizando los componentes principales\n","    reconstructed_ratings_matrix = U[:, :N] @ np.diag(sigma[:N]) @ Vt[:N, :]\n","\n","    return reconstructed_ratings_matrix\n","\n","# Utilizar la matriz de calificaciones del Test 1\n","matriz = np.random.randint(1, 6, size=(5, 5))\n","\n","N = 2\n","svd_recommendations_matrix = svd_recommendations(matriz, N)\n","\n","print(\"Recomendaciones basadas en SVD:\")\n","print(svd_recommendations_matrix)\n","\n","# Comparar los resultados con el Ejercicio 2\n","top_n_recommendations_matrix = recommend_top_n(matriz, N)\n","\n","print(\"Recomendaciones basadas en el algoritmo de los N-primeros:\")\n","print(top_n_recommendations_matrix)\n","print('RMSE of SVD: ', accuracy.rmse(predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XzCnG0jjQbNl","executionInfo":{"status":"ok","timestamp":1686954292431,"user_tz":240,"elapsed":249,"user":{"displayName":"Tomas Gonzalez Arce","userId":"12884299571658916274"}},"outputId":"640d949b-2a97-498f-ae68-098a42e8df56"},"id":"XzCnG0jjQbNl","execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Recomendaciones basadas en SVD:\n","[[3.52929038 2.57530486 3.24586045 2.98341031 1.7509677 ]\n"," [3.67767156 2.86745894 5.44296177 4.45845511 2.47542033]\n"," [1.00360355 0.90733117 2.88419477 2.13285544 1.11733959]\n"," [5.34894019 3.58779458 1.38602314 2.20744139 1.53775614]\n"," [4.42284215 2.93509976 0.79287468 1.59393893 1.15996568]]\n","Recomendaciones basadas en el algoritmo de los N-primeros:\n","[2 0]\n","RMSE: 0.8996\n","RMSE of SVD:  0.8996337158302906\n"]}]}],"metadata":{"noteable-chatgpt":{"create_notebook":{"openai_conversation_id":"0ddbee15-a81b-5efd-a3eb-e96a6949e17f","openai_ephemeral_user_id":"69a979d4-18c2-5097-83d1-83bc99035e03","openai_subdivision1_iso_code":"CL-RM"}},"noteable":{"last_delta_id":"150adcaf-3a68-4399-9ecd-2a22a96d8746"},"selected_hardware_size":"small","nteract":{"version":"noteable@2.9.0"},"colab":{"provenance":[]},"language_info":{"name":"python"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"nbformat":4,"nbformat_minor":5}